"""
This type stub file was generated by pyright.
"""

import datetime
from typing import Sequence
from icalevents.icalparser import Event

event_lock = ...
event_store = ...
threads = ...

def events(
    url: str | None = ...,
    file: str | None = ...,
    string_content: str | None = ...,
    start: datetime.datetime = ...,
    end: datetime.datetime = ...,
    fix_apple: bool = ...,
    http=...,
) -> Sequence[Event]:
    """
    Get all events form the given iCal URL occurring in the given time range.

    :param url: iCal URL
    :param file: iCal file path
    :param string_content: iCal content as string
    :param start: start date (see dateutils.date)
    :param end: end date (see dateutils.date)
    :param fix_apple: fix known Apple iCal issues
    :return: events as list of dictionaries
    """
    ...

def request_data(key, url, file, string_content, start, end, fix_apple):  # -> None:
    """
    Request data, update local data cache and remove this Thread form queue.

    :param key: key for data source to get result later
    :param url: iCal URL
    :param file: iCal file path
    :param string_content: iCal content as string
    :param start: start date
    :param end: end date
    :param fix_apple: fix known Apple iCal issues
    """
    ...

def events_async(
    key, url=..., file=..., start=..., string_content=..., end=..., fix_apple=...
):  # -> None:
    """
    Trigger an asynchronous data request.

    :param key: key for data source to get result later
    :param url: iCal URL
    :param file: iCal file path
    :param string_content: iCal content as string
    :param start: start date
    :param end: end date
    :param fix_apple: fix known Apple iCal issues
    """
    ...

def request_finished(key):  # -> None:
    """
    Remove finished Thread from queue.

    :param key: data source key
    """
    ...

def update_events(key, data):  # -> None:
    """
    Set the latest events for a key.

    :param key: key to set
    :param data: events for key
    """
    ...

def latest_events(key):
    """
    Get the latest downloaded events for the given key.

    :return: events for key
    """
    ...

def all_done(key):  # -> bool:
    """
    Check if requests for the given key are active.

    :param key: key for requests
    :return: True if requests are pending or active
    """
    ...
