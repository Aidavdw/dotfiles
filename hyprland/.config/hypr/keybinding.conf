# l -> locked, will also work when an input inhibitor (e.g. a lockscreen) is active.
# r -> release, will trigger on release of a key.
# e -> repeat, will repeat when held.
# n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
# m -> mouse, see below.
# t -> transparent, cannot be shadowed by other binds.
# i -> ignore mods, will ignore modifiers.
# s -> separate, will arbitrarily combine keys between each mod/key, see [Keysym combos](#keysym-combos) above.
# d -> has description, will allow you to write a description for your bind.


$mainMod = SUPER

###### OPENING APPS #######
$terminal = ghostty
$fm = thunar
$browser = floorp
# App opening submap
bind = $mainMod, n, submap, windownew
submap = windownew
# Note about submaps:
# If you don't explicitly exit out of them, they remain activated.
# catchall does *NOT* trigger as well if you have explicitly set a keymap already\
# So you need to set the resetting explicitly
# By adding a second bind to to the same key, you can execute them in order.
# So, add a second command that resets the submap
bindi = , t, exec, $terminal
bindi = , t, submap, reset
bindi = , f, exec, $fm
bindi = , f, submap, reset
bindi = , i, exec, $browser
bindi = , i, submap, reset
bindi = , n, exec, rofi -show drun -theme grid-launcher
bindi = , n, submap, reset
# exit out of submap after every press. 
# This then already includes 'escape', so no need to manually add that again.
bind = , catchall, submap, reset
submap = reset

# Secondary way to open a terminal, say in case no windows key.
bind = $mainMod, escape, exec, $terminal 
bind = Control_L, escape, exec, $terminal 

####### WORKSPACES #######
# ws numbers
$homeN = 1
$musicN = 2
$socialOneN = 3
$socialTwoN = 4
$calendarN = 5
$mailN = 6
$alphaN = 7
$betaN = 8
$gammaN = 9
$deltaN = 10
$fastOneN = 11
$fastTwoN = 12

# ws keys
$homeK = h # Home
$musicK = b # Bops
$socialOneK = s # Social
$socialTwoK = c # Chat
$calendarK = t # Timetable
$mailK = m # Mail
$alphaK = f
$betaK = o
$gammaK = u
$deltaK = Minus
$fastOneK = p
$fastTwoK = Comma
$specialK = y


# Switch to workspace
bind = $mainMod, s, submap, switchtoworkspace
submap = switchtoworkspace
bindi = , $homeK, workspace, $homeN
bindi = ,$homeK, submap, reset
bindi = , $musicK, workspace, $musicN
bindi = , $musicK, submap, reset
bindi = , $socialOneK, workspace, $socialOneN
bindi = , $socialOneK, submap, reset
bindi = , $socialTwoK, workspace, $socialTwoN
bindi = , $socialTwoK, submap, reset
bindi = , $socialTwoK, submap, reset
bindi = , $calendarK, workspace, $calendarN
bindi = , $calendarK, submap, reset
bindi = , $alphaK, workspace, $alphaN
bindi = , $alphaK, submap, reset
bindi = , $betaK, workspace, $betaN
bindi = , $betaK, submap, reset
bindi = , $gammaK, workspace, $gammaN
bindi = , $gammaK, submap, reset
bindi = , $deltaK, workspace, $deltaN
bindi = , $deltaK, submap, reset
# exit out of submap after every press. dont use this if nested submaps!
bindil = , catchall, submap, reset
submap = reset

# quick workspaces are not behind the submap, they are direct mappings
bind = $mainMod, $fastOneK, workspace, $fastOneN
bind = $mainMod, $fastTwoK, workspace, $fastTwoN
bind = $mainMod, $specialK, togglespecialworkspace, magic

# Goto previous workspace: allow swapping between 2 workspaces very quickly
bindd = $mainMod, i, previous workspace, workspace, previous_per_monitor
# next in order
bind = $mainMod, Period, workspace, e-1
bind = $mainMod, Slash, workspace, e+1


# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move focused window to other workspace
bind = $mainMod, m, submap, movewindowto
submap = movewindowto
bindi = , $homeK, movetoworkspace, $homeN
bindi = , $homeK, submap, reset
bindi = , $musicK, movetoworkspace, $musicN
bindi = , $musicK, submap, reset
bindi = , $socialOneK, movetoworkspace, $socialOneN
bindi = , $socialOneK, submap, reset
bindi = , $socialTwoK, movetoworkspace, $socialTwoN
bindi = , $socialTwoK, submap, reset
bindi = , $calendarK, movetoworkspace, $calendarN
bindi = , $calendarK, submap, reset
bindi = , $alphaK, movetoworkspace, $alphaN
bindi = , $alphaK, submap, reset
bindi = , $betaK, movetoworkspace, $betaN
bindi = , $betaK, submap, reset
bindi = , $gammaK, movetoworkspace, $gammaN
bindi = , $gammaK, submap, reset
bindi = , $deltaK, movetoworkspace, $deltaN
bindi = , $deltaK, submap, reset
bindi = , $fastOneK, movetoworkspace, $fastOneN
bindi = , $fastOneK, submap, reset
bindi = , $fastTwoK, movetoworkspace, $fastTwoN
bindi = , $fastTwoK, submap, reset
bindi = , $specialK, movetoworkspace, special:magic
bindi = , $specialK, submap, reset
# exit out of submap after every press. dont use this if nested submaps!
bind = , i, movetoworkspace, previous_per_monitor
bind = , i, submap, reset
bindil = , catchall, submap, reset
submap = reset

####### FOCUS SWITCH #######
# Arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# Extend layer but now without the caps
bind = $mainMod, h, movefocus, l
bind = $mainMod, e, movefocus, r
bind = $mainMod, o, movefocus, u
bind = $mainMod, a, movefocus, d


###### MODIFY WORKSPACE ########
# close focused window
bind = $mainMod, q, killactive,
bind = $mainMod+Shift_L, q, forcekillactive,

bind = $mainMod, d, submap, modifyworkspace
submap = modifyworkspace
bindi = , f, togglefloating
bindi = , f, submap, reset
bindi = , m, fullscreen # maximise toggle
bindi = , m, submap, reset
# todo: fake fullscreen with "fullscreenstate"
# Pin a window = make floating window appear on every workspace
bindi = , p, pin
bindi = , p, submap, reset
# Center the focused floating window
bindi = , c, centerwindow
bindi = , c, submap, reset
bindi = , h, pseudo
bindi = , h, submap, reset
bindi = , s, togglesplit
bindi = , s, submap, reset
# exit out of submap after every press.
bindil = , catchall, submap, reset
submap = reset

##### MOVE WINDOW INSIDE OF WORKSPACE ######
# Arrow keys
bind = $mainMod+Shift_L, left, movewindow, l
bind = $mainMod+Shift_L, right, movewindow, r
bind = $mainMod+Shift_L, up, movewindow, u
bind = $mainMod+Shift_L, down, movewindow, d

# Extend layer but now without the caps
bind = $mainMod+Shift_L, h, movewindow, l
bind = $mainMod+Shift_L, e, movewindow, r
bind = $mainMod+Shift_L, o, movewindow, u
bind = $mainMod+Shift_L, a, movewindow, d

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow

##### RESIZE WINDOW #######
binde = $mainMod&Control_L, left, resizeactive, -32 0
binde = $mainMod&Control_L, right, resizeactive, 32 0
binde = $mainMod&Control_L, up, resizeactive, 0 -24
binde = $mainMod&Control_L, down, resizeactive, 0 24

# Extend layer but now without the caps
binde = $mainMod&Control_L, h, resizeactive, -32 0
binde = $mainMod&Control_L, e, resizeactive, 32 0
binde = $mainMod&Control_L, o, resizeactive, 0 -24
binde = $mainMod&Control_L, a, resizeactive, 0 24

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:273, resizewindow

##### MULTIMEDIA ######

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindl = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindl = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl -e4 -n2 set 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl -e4 -n2 set 10%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous
bindl =, XF86AudioPlay, exec, playerctl play-pause
bindl =, XF86AudioStop, exec, playerctl stop

# Shift and volume does mpd
bindel = Shift_L, XF86AudioRaiseVolume, exec, mpc volume +5
bindel = Shift_L, XF86AudioLowerVolume, exec, mpc volume -5

########## MISC ##########
# Exit hyprland
bind = $mainMod, x, exit,
